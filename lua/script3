local buildsModelNameList = {"Chair", "Table", "tableForSolo", "tableForDuo", "tableForTrio", "tableForSquad", "WallX3", "WallX9", "FrenchFryer"}

local UpdateBuildablesEvent = game.ReplicatedStorage.UpdateBuildables
local UpdateTablesEvent = game.ReplicatedStorage.UpdateTablesEvent

local DataStoreService = game:GetService("DataStoreService")
local TycoonBuildablesList = DataStoreService:GetDataStore("TycoonBuildablesStore")

local TycoonFinder = require(game.ReplicatedStorage.TycoonFinder)

local ClearBuildablesEvent = game.ReplicatedStorage.ClearBuildablesEvent

local HttpService = game:GetService("HttpService")

local RecheckTablesEvent = game.ReplicatedStorage.TablesRecheck

local function getTableAndChairsFromModel(model)
	local tableData = {}
	
	if model.PrimaryPart then
		table.insert(tableData, {
			name = "Table",
			position = model.PrimaryPart.Position,
			orientation = model.PrimaryPart.Orientation
		})
		print("Found table model:", model.Name, "at position:", model.PrimaryPart.Position)
	end

	for _, part in pairs(model:GetChildren()) do
		if part:IsA("Model") and part.Name == "Chair" then
			table.insert(tableData, {
				name = "Chair",
				position = part.PrimaryPart.Position,
				orientation = part.PrimaryPart.Orientation
			})
			print("Found chair in model:", model.Name, "at position:", part.PrimaryPart.Position)
		end
	end

	return tableData
end


local function getTycoonBuilds(playerName)
	local buildsData = {}
	local addedPositions = {}

	print("called function to get buildables")
	for _, tycoon in pairs(workspace:GetDescendants()) do
		if tycoon.Name == "Tycoon" and tycoon.Owner.Value == tostring(playerName) then
			for _, build in pairs(tycoon:GetDescendants()) do
				if table.find(buildsModelNameList, build.Name) and build:IsA("Model") and build.PrimaryPart then
					local positionKey = tostring(build.PrimaryPart.Position)

					if not addedPositions[positionKey] then
						if build.Name == "tableForSolo" or build.Name == "tableForDuo" or build.Name == "tableForTrio" or build.Name == "tableForSquad" then
							local tableAndChairs = getTableAndChairsFromModel(build)
							for _, item in pairs(tableAndChairs) do
								local itemPositionKey = tostring(item.position)
								if not addedPositions[itemPositionKey] then
									table.insert(buildsData, item)
									addedPositions[itemPositionKey] = true
									print("Found item: ", item.name, " at position:", item.position)
								end
							end
						else
							table.insert(buildsData, {
								name = build.Name,
								position = build.PrimaryPart.Position,
								orientation = build.PrimaryPart.Orientation
							})
							addedPositions[positionKey] = true
							print("Found build: ", build.Name, " at position:", build.PrimaryPart.Position)
						end
					end
				end
			end
		end
	end
	return buildsData
end

local function saveBuildablesData(playerName, buildsData)
	for _, build in ipairs(buildsData) do
		print("Saving position for ", build.name, " Position: ", build.position, " Orientation: ", build.orientation)
		build.position = {
			X = build.position.X,
			Y = build.position.Y,
			Z = build.position.Z
		}
		build.orientation = {
			X = build.orientation.X,
			Y = build.orientation.Y,
			Z = build.orientation.Z
		}
	end

	local buildsDataJSON = HttpService:JSONEncode(buildsData)
	local success, errorMessage = pcall(function()
		TycoonBuildablesList:SetAsync(playerName, buildsDataJSON)
	end)

	if success then
		print("Successfully saved buildables data for player:", playerName)
	else
		warn("Failed to save buildables data for player:", playerName, "Error:", errorMessage)
	end
end

local function loadBuildablesData(playerName)
	local buildsData = {}
	local success, result = pcall(function()
		return TycoonBuildablesList:GetAsync(playerName)
	end)

	if success and result then
		buildsData = HttpService:JSONDecode(result)
		for _, build in ipairs(buildsData) do
			if typeof(build.position) == "table" then
				build.position = Vector3.new(build.position.X, build.position.Y, build.position.Z)
			end
			if typeof(build.orientation) == "table" then
				build.orientation = Vector3.new(build.orientation.X, build.orientation.Y, build.orientation.Z)
			end
		end
		print("Successfully loaded buildables data for player:", playerName)
	else
		print("No previous buildables data found for player:", playerName)
	end
	return buildsData
end
local lastPlacementTimes = {}

local function placeBuildablesInTycoon(player, buildsData)
	local tycoon = TycoonFinder.GetPlayerTycoon(player)
	if not tycoon then
		warn("Tycoon for player not found!")
		return
	end

	local totalBuilds = #buildsData
	local placedBuilds = 0

	for _, buildData in ipairs(buildsData) do
		local buildModelName = buildData.name
		local buildPosition = buildData.position
		local buildOrientation = buildData.orientation

		if typeof(buildPosition) ~= "Vector3" then
			warn("Invalid build position for " .. buildModelName .. ". Expected Vector3, got " .. typeof(buildPosition))
			return
		end

		if typeof(buildOrientation) ~= "Vector3" then
			warn("Invalid build orientation for " .. buildModelName .. ". Expected Vector3, got " .. typeof(buildOrientation))
			return
		end

		local buildModel = workspace:FindFirstChild(buildModelName)
		if buildModel then
			local clonedBuild = buildModel:Clone()
			if clonedBuild.PrimaryPart then
				local cf = CFrame.new(buildPosition) * CFrame.Angles(
					math.rad(buildOrientation.X),
					math.rad(buildOrientation.Y),
					math.rad(buildOrientation.Z)
				)

				local currentCFrame = clonedBuild.PrimaryPart.CFrame
				if currentCFrame.Position ~= buildPosition or currentCFrame.Orientation ~= buildOrientation then
					clonedBuild:SetPrimaryPartCFrame(cf)
					clonedBuild.Parent = tycoon
					print("Placed build:", buildModelName, "at position:", buildPosition, "with orientation:", buildOrientation)
				else
					print("Build:", buildModelName, "already at desired position and orientation. Skipping.")
				end

				if buildModelName == "Chair" then
					local chair = clonedBuild
					local IsOccupied = Instance.new("BoolValue")
					IsOccupied.Name = "isOccupied"
					IsOccupied.Value = false
					IsOccupied.Parent = chair
				end

				if buildModelName == "Table" then
					local Table = clonedBuild
					local CanBeUsed = Instance.new("BoolValue")
					CanBeUsed.Name = "CanBeUsed"
					CanBeUsed.Value = true
					CanBeUsed.Parent = Table

					local TableId = Instance.new("IntValue")
					TableId.Value = math.random(1, 9999)
					TableId.Name = "TableId"
					TableId.Parent = Table
				end
				local primaryPart = clonedBuild.PrimaryPart or clonedBuild:FindFirstChildOfClass("BasePart")

				if not primaryPart then
					warn("У модели Chair нет PrimaryPart или BasePart.")
					return
				end

				local modelCFrame, modelSize = clonedBuild:GetBoundingBox()

				local hitboxSize = modelSize + Vector3.new(0.1, 0.1, 0.1)

				local hitbox = Instance.new("Part")
				hitbox.Name = "HitBox"
				hitbox.Size = hitboxSize
				hitbox.CFrame = modelCFrame
				hitbox.Anchored = true
				hitbox.CanCollide = false р
				hitbox.Transparency = 1 
				hitbox.Parent = clonedBuild

				print("Хитбокс для модели Chair успешно создан.")
				placedBuilds = placedBuilds + 1
			else
				warn("No PrimaryPart for model " .. buildModelName .. " at position: " .. tostring(buildPosition))
			end
		else
			warn("Model " .. buildModelName .. " not found in workspace!")
		end
	end

	if placedBuilds == totalBuilds then
		RecheckTablesEvent:Fire(player)
	else
		print("Not all builds were placed. RecheckTablesEvent not fired.")
	end
end

UpdateBuildablesEvent.Event:Connect(function(player)
	print("Player that called update the tycoon buildables:", player)
	local buildableList = getTycoonBuilds(player.Name)

	saveBuildablesData(player.Name, buildableList)

	print("Buildables saved for player:", player.Name)
end)

game.Players.PlayerAdded:Connect(function(player)
	local buildsData = loadBuildablesData(player.Name)
	placeBuildablesInTycoon(player, buildsData)
end)


local function clearBuildables(player)
	local tycoon = TycoonFinder.GetPlayerTycoon(player)
	if tycoon then
		for _, build in ipairs(tycoon:GetChildren()) do
			if build:IsA("Model") and table.find(buildsModelNameList, build.Name) then
				build:Destroy() 
				print("Destroyed build:", build.Name)
			end
		end
		local success, errorMessage = pcall(function()
			TycoonBuildablesList:SetAsync(player.UserId, "")
		end)

		if success then
			print("Successfully cleared buildables data for player:", player.Name)
		else
			warn("Failed to clear buildables data for player:", player.Name, "Error:", errorMessage)
		end
	else
		warn("Tycoon for player not found!")
	end
end

ClearBuildablesEvent.OnServerEvent:Connect(function(player)
	clearBuildables(player)
end)

UpdateTablesEvent.Event:Connect(function(player)
	print(player)
	print(player.Name)
	local buildableList = getTycoonBuilds(player.Name)
	saveBuildablesData(player.Name, buildableList)
end)
